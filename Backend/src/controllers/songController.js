import { v2 as cloudinary } from 'cloudinary'
import songModel from '../models/songModel.js';

const addSong = async(req,res) => {
    try {
        const name = req.body.name;
        const desc = req.body.desc;
        const album = req.body.album;
        const audioFile = req.files.audio[0];   //in thunderclient we put this in files section in from so thats why files insead of body
        const imageFile = req.files.image[0];
        //Now we have to upload audio and videoFile on our cloudinary storage //To do this we use cloudinary uploader
        const audioUpload = await cloudinary.uploader.upload(audioFile.path, {resource_type: "video"})  //in cloudinary we have only 2 files i.e. image and video so audio will be video resource type
        const imageUpload = await cloudinary.uploader.upload(imageFile.path, {resource_type: "image"}) 
        // console.log(name, desc, album, audioUpload, imageUpload)
        const duration = `${Math.floor(audioUpload.duration / 60)} : ${Math.floor(audioUpload.duration % 60)}`   //duration is visible when console.log is used

        //This was made on basis of schema  
        const songData = {
            name,
            desc,
            album,
            image: imageUpload.secure_url,      //Check after console log in terminal
            file: audioUpload.secure_url,
            duration
        }

        const song = songModel(songData)        //To save data in the data base //We have created model using song model so saving song data through song Model
        await song.save();
        res.json({success: true, message: "Song Added"})

    } catch (error) {
        console.error(error)
        res.json({success: false})
    }
}

const listSong = async(req,res) => {
    try {
        const allSongs = await songModel.find({})   //This is empty so that all songs gets displayed
        res.send({success: true, songs:allSongs})
    } catch (error) {
        res.send({success: false})
        console.log(error)
    }
}

const removeSong = async(req,res) => {
    try {
        await songModel.findByIdAndDelete(req.body.id)      //id is auto generated by mongoDB
        res.send({success: true, message: "Song Removed"})
    } catch (error) {
        console.log(error)
        res.send({success:false})
    }
}

export {addSong, listSong, removeSong}  //While exporting multiple functions, we use only export and not export default